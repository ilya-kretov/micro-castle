apiVersion: v1
kind: Service
metadata:
  labels:
    service: kafka
  name: kafka
spec:
  selector:
    service: kafka
  ports:
    - name: internal
      port: 29092
      targetPort: 29092
    - name: external
      port: 30092
      targetPort: 9092
      nodePort: 30092
  type: NodePort

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      service: kafka
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: kafka
    spec:
      enableServiceLinks: false
      hostname: kafka
      containers:
      - name: kafka
        imagePullPolicy: IfNotPresent
        image: confluentinc/cp-server:7.2.1
        ports:
          - containerPort: 29092
          - containerPort: 9092
        env:
          - name: CONFLUENT_SUPPORT_CUSTOMER_ID
            value: "anonymous"
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "INTERNAL://kafka:29092,LISTENER_EXTERNAL://kafka:9092"
          - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
            value: "true"
          - name: KAFKA_BROKER_ID
            value: "1"
          - name: KAFKA_DEFAULT_REPLICATION_FACTOR
            value: "1"
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: "INTERNAL"
          - name: KAFKA_LISTENERS
            value: "INTERNAL://:29092,LISTENER_EXTERNAL://:9092"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
          - name: KAFKA_NUM_PARTITIONS
            value: "1"
          - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: "1"
          - name: KAFKA_LOG_CLEANUP_POLICY
            value: "compact"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zookeeper:2181"
        resources: {}
        # volumeMounts:
        #   - mountPath: /var/lib/kafka/data
        #     name: kafka-data
      restartPolicy: Always
      # volumes:
      #   - name: kafka-data
      #     persistentVolumeClaim:
      #       claimName: kafka-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      service: zookeeper
  strategy: {}
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: zookeeper
    spec:
      containers:
        - env:
            - name: TZ
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            # - name: ZOOKEEPER_DATA_DIR
            #   value: "/var/lib/zookeeper/data"
            # - name: ZOOKEEPER_LOG_DIR
            #   value: "/var/lib/zookeeper/log"
            - name: ZOOKEEPER_SERVER_ID
              value: "1"
          image: confluentinc/cp-zookeeper:7.2.1
          name: zookeeper
          ports:
            - containerPort: 2181
          resources: {}
          # volumeMounts:
          #   - mountPath: /var/lib/zookeeper/data
          #     name: zookeeper-data
          #   - mountPath: /var/lib/zookeeper/log
          #     name: zookeeper-log
      hostname: zookeeper
      restartPolicy: Always
      # volumes:
      #   - name: zookeeper-data
      #     persistentVolumeClaim:
      #       claimName: zookeeper-data-pvc
      #   - name: zookeeper-log
      #     persistentVolumeClaim:
      #       claimName: zookeeper-log-pvc

---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: zookeeper
  name: zookeeper
spec:
  ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
  selector:
    service: zookeeper

---
kind: Service
apiVersion: v1
metadata:
  name: kafka-ui
  labels:
    app: kafka-ui
spec:
  type: LoadBalancer
  selector:
    app: kafka-ui
  ports:
    - name: http
      targetPort: 8080
      port: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui-deployment
  labels:
    app: kafka-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      containers:
      - name: kafka-ui
        image: provectuslabs/kafka-ui:latest
        ports:
        - containerPort: 8080
        env:
          - name: DYNAMIC_CONFIG_ENABLED
            value: "true"
